#!/usr/bin/env python3
"""SVG link inserter and HTML template generator.

Authors: Matthew Budd
Owner: Matthew Budd
"""

import sys
import os
import argparse
from datetime import datetime
import yaml
import textwrap
from scour import scour
from collections import namedtuple
from lxml import etree


# HTML_____________________________________________

LINK_COLOUR = "#0000ff"
LINK_FONT = "font-family:Roboto"
FONT_SPEC = "font-family"


def get_header_str():
    """
    Get header for autogenerated HTML file.

    Returns:
        str: header string
    """
    timestr = datetime.now().strftime("%Y/%m/%d, %H:%M:%S")

    return f"""<!--
AUTOGENERATED BY svg_link.py
DO NOT EDIT
GENERATED {timestr}
-->\n"""


def yaml_link(key, val):
    """
    From YAML format: get the html tag from specification key.

    Returns:
        str: header string
    """

    if key == "link_newtab":
        return {
            "{http://www.w3.org/1999/xlink}href": val,
            "target": "_blank",
        }

    elif key == "link_nav":
        return {
            "{http://www.w3.org/1999/xlink}href": val,
            "onclick": f"top.svgNav('{val}')",
        }

    else:
        raise Exception("Unrecognised link tag")


# SVG______________________________________________


def scour_svg(svg_str):
    """
    Remove metadata, namespace pollution, overspecified coordinate values etc from an svg
    formatted string.

    Args:
        svg_str (str): input svg string

    Returns:
        str: output svg string, scoured
    """
    scour_options = scour.sanitizeOptions(options=None)
    scour_options.remove_metadata = True
    return scour.scourString(svg_str, options=scour_options)


def process_links(xml_filepath, links_list):
    """
    Processes xml_filepath given the specification in links_dict, to add tags around
    specific xml blocks.

    Args:
        xml_filepath (str or Path): path to xml file.
        links_dict (dict): dictionary specifying which blocks to process and how

    Returns:
        str: processes xml string.
    """

    find_str_dict = {}
    all_find_keys = set()

    if links_list is None:
        links_list = []

    for link_dict in links_list:
        link_type = first_match_dict_key(link_dict, lambda k: k.startswith("link"))
        if link_type is None:
            raise Exception("Link entry has no link url")

        link_text_strs = link_dict["text"]
        if isinstance(link_text_strs, str):
            link_text_strs = [link_text_strs]

        for link_text in link_text_strs:
            if link_text in find_str_dict:
                raise Exception("Same link text defined twice: ambiguous")

            find_str_dict[link_text] = yaml_link(link_type, link_dict[link_type])
            all_find_keys.add(link_text)

    tree = etree.parse(xml_filepath)
    root = tree.getroot()

    # Find all <tspan>s in the svg namespace that are the correct colour
    tspans = [
        c
        for c in root.findall(".//{http://www.w3.org/2000/svg}tspan")
        if "style" in c.attrib and ("fill:" + LINK_COLOUR in c.attrib["style"])
    ]

    print(f"Number of tspans to search: {len(tspans)}")

    for tspan in tspans:
        if tspan.text is None:
            continue

        # Enforce font
        if LINK_FONT not in tspan.attrib["style"]:
            if FONT_SPEC in tspan.attrib["style"]:
                print(f"Warning: non-default font for link '{tspan.text}'")
            else:
                tspan.attrib["style"] = LINK_FONT + ";" + tspan.attrib["style"]

        text = tspan.text.strip()

        if text in find_str_dict:
            try:
                all_find_keys.remove(text)
            except KeyError:
                raise Exception("Multiple xml elements match link")

            parent_node = tspan.getparent()

            link_tag = etree.Element(
                "a",
                attrib=find_str_dict[text],
            )
            tspan.addnext(link_tag)
            parent_node.remove(tspan)
            link_tag.append(tspan)

    if len(all_find_keys) > 0:
        print(f"Warning: {all_find_keys} were not found in svg")

    return etree.tostring(root, encoding="unicode")


def indent(text, amount, ch=" "):
    """
    Indent a string by the specified number of characters.
    """
    return textwrap.indent(text, amount * ch)


def replace_line(template_file, find_str, replace_str):
    """
    Given a string in a "template" file, replace all lines containing find_str with
    replace_str.

    Args:
        template_file (str or Path): path to template file
        find_str (str): string to replace
        replace_str (str): string to use when replacing find_str

    Returns:
        str: output string with instances of find_str replaced.
    """
    out_str = ""

    with open(template_file, "r") as f:
        for line in f.readlines():
            if find_str in line:
                indentation = len(line) - len(line.lstrip())
                out_str += indent(replace_str, indentation)
                out_str += "\n"
            else:
                out_str += line

    return out_str


def first_match_dict_key(search_dict, cond):
    """
    Return first key in search_dict where cond(k) is True.
    """
    for k in search_dict.keys():
        if cond(k):
            return k
    return None


def realpath(path):
    """ """
    return os.path.realpath(os.path.expanduser(path))


def string_from_file(filepath):
    """ """
    with open(realpath(filepath), "r") as f:
        file_str = f.read()
    return file_str


def string_to_file(filepath, str_to_write):
    """ """
    with open(realpath(filepath), "w") as f:
        f.write(str_to_write)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Insert link tags into an SVG document"
    )
    parser.add_argument("--svg-file", type=str, default="page_text.svg")
    parser.add_argument("--links-yaml-file", type=str, default="links.yaml")
    parser.add_argument("--output-svg-file", type=str, default=None)
    parser.add_argument("--template-html", type=str, default="template.html")
    parser.add_argument("--output", "-o", type=str, default="../../index.html")
    parser.add_argument("--no-scour", action="store_true", default=False)
    parser.add_argument("--no-link", action="store_true", default=False)

    args = parser.parse_args(sys.argv[1:])

    if args.no_link:
        svg_str = string_from_file(args.svg_file)
    else:
        links_dict = yaml.safe_load(string_from_file(args.links_yaml_file))
        svg_str = process_links(realpath(args.svg_file), links_dict["links"])

    if args.no_scour:
        clean_svg_str = svg_str
    else:
        clean_svg_str = scour_svg(svg_str)

    if args.output_svg_file is not None:
        string_to_file(args.output_svg_file, clean_svg_str)
        exit()

    template_str = string_from_file(args.template_html)
    html_out_str = replace_line(
        realpath(args.template_html),
        "[svg_template_field]",
        clean_svg_str,
    )
    html_out_str = get_header_str() + html_out_str
    string_to_file(args.output, html_out_str)
